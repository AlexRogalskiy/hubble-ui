// Copyright 2019 Authors of Hubble
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// source: collector_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("proto.io.covalent.pb.K8sMetadata", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPod", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPodContainer", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPodContainerPort", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPodContainerStatus", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPodSpec", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPodStatus", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPodStatusCondition", null, global);
goog.exportSymbol("proto.io.covalent.pb.K8sPods", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.covalent.pb.K8sMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sMetadata.displayName =
    "proto.io.covalent.pb.K8sMetadata";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPodContainerPort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.covalent.pb.K8sPodContainerPort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPodContainerPort.displayName =
    "proto.io.covalent.pb.K8sPodContainerPort";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPodContainer = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.io.covalent.pb.K8sPodContainer.repeatedFields_,
    null
  );
};
goog.inherits(proto.io.covalent.pb.K8sPodContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPodContainer.displayName =
    "proto.io.covalent.pb.K8sPodContainer";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPodSpec = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.io.covalent.pb.K8sPodSpec.repeatedFields_,
    null
  );
};
goog.inherits(proto.io.covalent.pb.K8sPodSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPodSpec.displayName =
    "proto.io.covalent.pb.K8sPodSpec";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPodStatusCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.covalent.pb.K8sPodStatusCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPodStatusCondition.displayName =
    "proto.io.covalent.pb.K8sPodStatusCondition";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPodContainerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.covalent.pb.K8sPodContainerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPodContainerStatus.displayName =
    "proto.io.covalent.pb.K8sPodContainerStatus";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPodStatus = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.io.covalent.pb.K8sPodStatus.repeatedFields_,
    null
  );
};
goog.inherits(proto.io.covalent.pb.K8sPodStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPodStatus.displayName =
    "proto.io.covalent.pb.K8sPodStatus";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.covalent.pb.K8sPod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPod.displayName = "proto.io.covalent.pb.K8sPod";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.covalent.pb.K8sPods = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.io.covalent.pb.K8sPods.repeatedFields_,
    null
  );
};
goog.inherits(proto.io.covalent.pb.K8sPods, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.covalent.pb.K8sPods.displayName = "proto.io.covalent.pb.K8sPods";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sMetadata.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sMetadata.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sMetadata} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sMetadata.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
        uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
        labelsMap: (f = msg.getLabelsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        annotationsMap: (f = msg.getAnnotationsMap())
          ? f.toObject(includeInstance, undefined)
          : []
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sMetadata}
 */
proto.io.covalent.pb.K8sMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sMetadata();
  return proto.io.covalent.pb.K8sMetadata.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sMetadata}
 */
proto.io.covalent.pb.K8sMetadata.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setNamespace(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setUid(value);
        break;
      case 4:
        var value = msg.getLabelsMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          );
        });
        break;
      case 5:
        var value = msg.getAnnotationsMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sMetadata.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      4,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      5,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.covalent.pb.K8sMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sMetadata} returns this
 */
proto.io.covalent.pb.K8sMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.io.covalent.pb.K8sMetadata.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sMetadata} returns this
 */
proto.io.covalent.pb.K8sMetadata.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string uid = 3;
 * @return {string}
 */
proto.io.covalent.pb.K8sMetadata.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sMetadata} returns this
 */
proto.io.covalent.pb.K8sMetadata.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * map<string, string> labels = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.io.covalent.pb.K8sMetadata.prototype.getLabelsMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(
    this,
    4,
    opt_noLazyCreate,
    null
  ));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.covalent.pb.K8sMetadata} returns this
 */
proto.io.covalent.pb.K8sMetadata.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;
};

/**
 * map<string, string> annotations = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.io.covalent.pb.K8sMetadata.prototype.getAnnotationsMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(
    this,
    5,
    opt_noLazyCreate,
    null
  ));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.covalent.pb.K8sMetadata} returns this
 */
proto.io.covalent.pb.K8sMetadata.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
  return this;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPodContainerPort.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPodContainerPort.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPodContainerPort} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPodContainerPort.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        hostPort: jspb.Message.getFieldWithDefault(msg, 2, 0),
        containerPort: jspb.Message.getFieldWithDefault(msg, 3, 0),
        protocol: jspb.Message.getFieldWithDefault(msg, 4, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPodContainerPort}
 */
proto.io.covalent.pb.K8sPodContainerPort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPodContainerPort();
  return proto.io.covalent.pb.K8sPodContainerPort.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPodContainerPort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPodContainerPort}
 */
proto.io.covalent.pb.K8sPodContainerPort.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setHostPort(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setContainerPort(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setProtocol(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPodContainerPort.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPodContainerPort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPodContainerPort.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getHostPort();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getContainerPort();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodContainerPort} returns this
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int32 host_port = 2;
 * @return {number}
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.getHostPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.io.covalent.pb.K8sPodContainerPort} returns this
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.setHostPort = function(
  value
) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 container_port = 3;
 * @return {number}
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.getContainerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.io.covalent.pb.K8sPodContainerPort} returns this
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.setContainerPort = function(
  value
) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string protocol = 4;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodContainerPort} returns this
 */
proto.io.covalent.pb.K8sPodContainerPort.prototype.setProtocol = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.covalent.pb.K8sPodContainer.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPodContainer.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPodContainer.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPodContainer} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPodContainer.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        image: jspb.Message.getFieldWithDefault(msg, 2, ""),
        portsList: jspb.Message.toObjectList(
          msg.getPortsList(),
          proto.io.covalent.pb.K8sPodContainerPort.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPodContainer}
 */
proto.io.covalent.pb.K8sPodContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPodContainer();
  return proto.io.covalent.pb.K8sPodContainer.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPodContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPodContainer}
 */
proto.io.covalent.pb.K8sPodContainer.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setImage(value);
        break;
      case 3:
        var value = new proto.io.covalent.pb.K8sPodContainerPort();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sPodContainerPort.deserializeBinaryFromReader
        );
        msg.addPorts(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPodContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPodContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPodContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPodContainer.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPortsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.covalent.pb.K8sPodContainerPort.serializeBinaryToWriter
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodContainer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodContainer} returns this
 */
proto.io.covalent.pb.K8sPodContainer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string image = 2;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodContainer.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodContainer} returns this
 */
proto.io.covalent.pb.K8sPodContainer.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated K8sPodContainerPort ports = 3;
 * @return {!Array<!proto.io.covalent.pb.K8sPodContainerPort>}
 */
proto.io.covalent.pb.K8sPodContainer.prototype.getPortsList = function() {
  return /** @type{!Array<!proto.io.covalent.pb.K8sPodContainerPort>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.io.covalent.pb.K8sPodContainerPort,
    3
  ));
};

/**
 * @param {!Array<!proto.io.covalent.pb.K8sPodContainerPort>} value
 * @return {!proto.io.covalent.pb.K8sPodContainer} returns this
 */
proto.io.covalent.pb.K8sPodContainer.prototype.setPortsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.io.covalent.pb.K8sPodContainerPort=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.covalent.pb.K8sPodContainerPort}
 */
proto.io.covalent.pb.K8sPodContainer.prototype.addPorts = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.io.covalent.pb.K8sPodContainerPort,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.covalent.pb.K8sPodContainer} returns this
 */
proto.io.covalent.pb.K8sPodContainer.prototype.clearPortsList = function() {
  return this.setPortsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.covalent.pb.K8sPodSpec.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPodSpec.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPodSpec.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPodSpec} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPodSpec.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        containersList: jspb.Message.toObjectList(
          msg.getContainersList(),
          proto.io.covalent.pb.K8sPodContainer.toObject,
          includeInstance
        ),
        hostNetwork: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPodSpec}
 */
proto.io.covalent.pb.K8sPodSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPodSpec();
  return proto.io.covalent.pb.K8sPodSpec.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPodSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPodSpec}
 */
proto.io.covalent.pb.K8sPodSpec.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setNodeName(value);
        break;
      case 2:
        var value = new proto.io.covalent.pb.K8sPodContainer();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sPodContainer.deserializeBinaryFromReader
        );
        msg.addContainers(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setHostNetwork(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPodSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPodSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPodSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPodSpec.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getContainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.covalent.pb.K8sPodContainer.serializeBinaryToWriter
    );
  }
  f = message.getHostNetwork();
  if (f) {
    writer.writeBool(3, f);
  }
};

/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodSpec.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodSpec} returns this
 */
proto.io.covalent.pb.K8sPodSpec.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated K8sPodContainer containers = 2;
 * @return {!Array<!proto.io.covalent.pb.K8sPodContainer>}
 */
proto.io.covalent.pb.K8sPodSpec.prototype.getContainersList = function() {
  return /** @type{!Array<!proto.io.covalent.pb.K8sPodContainer>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.io.covalent.pb.K8sPodContainer,
    2
  ));
};

/**
 * @param {!Array<!proto.io.covalent.pb.K8sPodContainer>} value
 * @return {!proto.io.covalent.pb.K8sPodSpec} returns this
 */
proto.io.covalent.pb.K8sPodSpec.prototype.setContainersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.io.covalent.pb.K8sPodContainer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.covalent.pb.K8sPodContainer}
 */
proto.io.covalent.pb.K8sPodSpec.prototype.addContainers = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.io.covalent.pb.K8sPodContainer,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.covalent.pb.K8sPodSpec} returns this
 */
proto.io.covalent.pb.K8sPodSpec.prototype.clearContainersList = function() {
  return this.setContainersList([]);
};

/**
 * optional bool host_network = 3;
 * @return {boolean}
 */
proto.io.covalent.pb.K8sPodSpec.prototype.getHostNetwork = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
    this,
    3,
    false
  ));
};

/**
 * @param {boolean} value
 * @return {!proto.io.covalent.pb.K8sPodSpec} returns this
 */
proto.io.covalent.pb.K8sPodSpec.prototype.setHostNetwork = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPodStatusCondition.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPodStatusCondition.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPodStatusCondition} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPodStatusCondition.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ""),
        message: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPodStatusCondition}
 */
proto.io.covalent.pb.K8sPodStatusCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPodStatusCondition();
  return proto.io.covalent.pb.K8sPodStatusCondition.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPodStatusCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPodStatusCondition}
 */
proto.io.covalent.pb.K8sPodStatusCondition.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPodStatusCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPodStatusCondition.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPodStatusCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPodStatusCondition.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodStatusCondition.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodStatusCondition} returns this
 */
proto.io.covalent.pb.K8sPodStatusCondition.prototype.setStatus = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodStatusCondition.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodStatusCondition} returns this
 */
proto.io.covalent.pb.K8sPodStatusCondition.prototype.setMessage = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPodContainerStatus.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPodContainerStatus.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPodContainerStatus} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPodContainerStatus.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        image: jspb.Message.getFieldWithDefault(msg, 1, ""),
        restartCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
        imageId: jspb.Message.getFieldWithDefault(msg, 3, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPodContainerStatus}
 */
proto.io.covalent.pb.K8sPodContainerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPodContainerStatus();
  return proto.io.covalent.pb.K8sPodContainerStatus.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPodContainerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPodContainerStatus}
 */
proto.io.covalent.pb.K8sPodContainerStatus.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setImage(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setRestartCount(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setImageId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPodContainerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPodContainerStatus.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPodContainerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPodContainerStatus.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRestartCount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string image = 1;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodContainerStatus.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodContainerStatus} returns this
 */
proto.io.covalent.pb.K8sPodContainerStatus.prototype.setImage = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int64 restart_count = 2;
 * @return {number}
 */
proto.io.covalent.pb.K8sPodContainerStatus.prototype.getRestartCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.io.covalent.pb.K8sPodContainerStatus} returns this
 */
proto.io.covalent.pb.K8sPodContainerStatus.prototype.setRestartCount = function(
  value
) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string image_id = 3;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodContainerStatus.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodContainerStatus} returns this
 */
proto.io.covalent.pb.K8sPodContainerStatus.prototype.setImageId = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.covalent.pb.K8sPodStatus.repeatedFields_ = [2, 6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPodStatus.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPodStatus.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPodStatus} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPodStatus.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        phase: jspb.Message.getFieldWithDefault(msg, 1, ""),
        conditionsList: jspb.Message.toObjectList(
          msg.getConditionsList(),
          proto.io.covalent.pb.K8sPodStatusCondition.toObject,
          includeInstance
        ),
        hostIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
        podIp: jspb.Message.getFieldWithDefault(msg, 4, ""),
        startTime: jspb.Message.getFieldWithDefault(msg, 5, ""),
        containerStatusesList: jspb.Message.toObjectList(
          msg.getContainerStatusesList(),
          proto.io.covalent.pb.K8sPodContainerStatus.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPodStatus}
 */
proto.io.covalent.pb.K8sPodStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPodStatus();
  return proto.io.covalent.pb.K8sPodStatus.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPodStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPodStatus}
 */
proto.io.covalent.pb.K8sPodStatus.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhase(value);
        break;
      case 2:
        var value = new proto.io.covalent.pb.K8sPodStatusCondition();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sPodStatusCondition.deserializeBinaryFromReader
        );
        msg.addConditions(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setHostIp(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPodIp(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setStartTime(value);
        break;
      case 6:
        var value = new proto.io.covalent.pb.K8sPodContainerStatus();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sPodContainerStatus.deserializeBinaryFromReader
        );
        msg.addContainerStatuses(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPodStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPodStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPodStatus.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getPhase();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.covalent.pb.K8sPodStatusCondition.serializeBinaryToWriter
    );
  }
  f = message.getHostIp();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPodIp();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getStartTime();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getContainerStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.io.covalent.pb.K8sPodContainerStatus.serializeBinaryToWriter
    );
  }
};

/**
 * optional string phase = 1;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.getPhase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.setPhase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated K8sPodStatusCondition conditions = 2;
 * @return {!Array<!proto.io.covalent.pb.K8sPodStatusCondition>}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.io.covalent.pb.K8sPodStatusCondition>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.io.covalent.pb.K8sPodStatusCondition,
    2
  ));
};

/**
 * @param {!Array<!proto.io.covalent.pb.K8sPodStatusCondition>} value
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.setConditionsList = function(
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.io.covalent.pb.K8sPodStatusCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.covalent.pb.K8sPodStatusCondition}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.addConditions = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.io.covalent.pb.K8sPodStatusCondition,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};

/**
 * optional string host_ip = 3;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.getHostIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.setHostIp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string pod_ip = 4;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.getPodIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.setPodIp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string start_time = 5;
 * @return {string}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.getStartTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * repeated K8sPodContainerStatus container_statuses = 6;
 * @return {!Array<!proto.io.covalent.pb.K8sPodContainerStatus>}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.getContainerStatusesList = function() {
  return /** @type{!Array<!proto.io.covalent.pb.K8sPodContainerStatus>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.io.covalent.pb.K8sPodContainerStatus,
    6
  ));
};

/**
 * @param {!Array<!proto.io.covalent.pb.K8sPodContainerStatus>} value
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.setContainerStatusesList = function(
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.io.covalent.pb.K8sPodContainerStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.covalent.pb.K8sPodContainerStatus}
 */
proto.io.covalent.pb.K8sPodStatus.prototype.addContainerStatuses = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    6,
    opt_value,
    proto.io.covalent.pb.K8sPodContainerStatus,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.covalent.pb.K8sPodStatus} returns this
 */
proto.io.covalent.pb.K8sPodStatus.prototype.clearContainerStatusesList = function() {
  return this.setContainerStatusesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPod.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPod.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPod} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPod.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        metadata:
          (f = msg.getMetadata()) &&
          proto.io.covalent.pb.K8sMetadata.toObject(includeInstance, f),
        spec:
          (f = msg.getSpec()) &&
          proto.io.covalent.pb.K8sPodSpec.toObject(includeInstance, f),
        status:
          (f = msg.getStatus()) &&
          proto.io.covalent.pb.K8sPodStatus.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPod}
 */
proto.io.covalent.pb.K8sPod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPod();
  return proto.io.covalent.pb.K8sPod.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPod}
 */
proto.io.covalent.pb.K8sPod.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.io.covalent.pb.K8sMetadata();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sMetadata.deserializeBinaryFromReader
        );
        msg.setMetadata(value);
        break;
      case 2:
        var value = new proto.io.covalent.pb.K8sPodSpec();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sPodSpec.deserializeBinaryFromReader
        );
        msg.setSpec(value);
        break;
      case 3:
        var value = new proto.io.covalent.pb.K8sPodStatus();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sPodStatus.deserializeBinaryFromReader
        );
        msg.setStatus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPod.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.covalent.pb.K8sMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.covalent.pb.K8sPodSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.covalent.pb.K8sPodStatus.serializeBinaryToWriter
    );
  }
};

/**
 * optional K8sMetadata metadata = 1;
 * @return {?proto.io.covalent.pb.K8sMetadata}
 */
proto.io.covalent.pb.K8sPod.prototype.getMetadata = function() {
  return /** @type{?proto.io.covalent.pb.K8sMetadata} */ (jspb.Message.getWrapperField(
    this,
    proto.io.covalent.pb.K8sMetadata,
    1
  ));
};

/**
 * @param {?proto.io.covalent.pb.K8sMetadata|undefined} value
 * @return {!proto.io.covalent.pb.K8sPod} returns this
 */
proto.io.covalent.pb.K8sPod.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.covalent.pb.K8sPod} returns this
 */
proto.io.covalent.pb.K8sPod.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.covalent.pb.K8sPod.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional K8sPodSpec spec = 2;
 * @return {?proto.io.covalent.pb.K8sPodSpec}
 */
proto.io.covalent.pb.K8sPod.prototype.getSpec = function() {
  return /** @type{?proto.io.covalent.pb.K8sPodSpec} */ (jspb.Message.getWrapperField(
    this,
    proto.io.covalent.pb.K8sPodSpec,
    2
  ));
};

/**
 * @param {?proto.io.covalent.pb.K8sPodSpec|undefined} value
 * @return {!proto.io.covalent.pb.K8sPod} returns this
 */
proto.io.covalent.pb.K8sPod.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.covalent.pb.K8sPod} returns this
 */
proto.io.covalent.pb.K8sPod.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.covalent.pb.K8sPod.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional K8sPodStatus status = 3;
 * @return {?proto.io.covalent.pb.K8sPodStatus}
 */
proto.io.covalent.pb.K8sPod.prototype.getStatus = function() {
  return /** @type{?proto.io.covalent.pb.K8sPodStatus} */ (jspb.Message.getWrapperField(
    this,
    proto.io.covalent.pb.K8sPodStatus,
    3
  ));
};

/**
 * @param {?proto.io.covalent.pb.K8sPodStatus|undefined} value
 * @return {!proto.io.covalent.pb.K8sPod} returns this
 */
proto.io.covalent.pb.K8sPod.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.covalent.pb.K8sPod} returns this
 */
proto.io.covalent.pb.K8sPod.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.covalent.pb.K8sPod.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.covalent.pb.K8sPods.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.covalent.pb.K8sPods.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.io.covalent.pb.K8sPods.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.covalent.pb.K8sPods} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.covalent.pb.K8sPods.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        podsList: jspb.Message.toObjectList(
          msg.getPodsList(),
          proto.io.covalent.pb.K8sPod.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.covalent.pb.K8sPods}
 */
proto.io.covalent.pb.K8sPods.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.covalent.pb.K8sPods();
  return proto.io.covalent.pb.K8sPods.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.covalent.pb.K8sPods} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.covalent.pb.K8sPods}
 */
proto.io.covalent.pb.K8sPods.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.io.covalent.pb.K8sPod();
        reader.readMessage(
          value,
          proto.io.covalent.pb.K8sPod.deserializeBinaryFromReader
        );
        msg.addPods(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.covalent.pb.K8sPods.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.covalent.pb.K8sPods.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.covalent.pb.K8sPods} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.covalent.pb.K8sPods.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getPodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.covalent.pb.K8sPod.serializeBinaryToWriter
    );
  }
};

/**
 * repeated K8sPod pods = 1;
 * @return {!Array<!proto.io.covalent.pb.K8sPod>}
 */
proto.io.covalent.pb.K8sPods.prototype.getPodsList = function() {
  return /** @type{!Array<!proto.io.covalent.pb.K8sPod>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.io.covalent.pb.K8sPod,
    1
  ));
};

/**
 * @param {!Array<!proto.io.covalent.pb.K8sPod>} value
 * @return {!proto.io.covalent.pb.K8sPods} returns this
 */
proto.io.covalent.pb.K8sPods.prototype.setPodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.io.covalent.pb.K8sPod=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.covalent.pb.K8sPod}
 */
proto.io.covalent.pb.K8sPods.prototype.addPods = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.io.covalent.pb.K8sPod,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.covalent.pb.K8sPods} returns this
 */
proto.io.covalent.pb.K8sPods.prototype.clearPodsList = function() {
  return this.setPodsList([]);
};

goog.object.extend(exports, proto.io.covalent.pb);
